using System;
using System.Collections.Generic;
using ScriptRunner.Plugins.GraphTool.Enums;
using ScriptRunner.Plugins.Models;

namespace ScriptRunner.Plugins.GraphTool.Interfaces;

/// <summary>
/// Defines the interface for managing plugins that create or modify graph data structures.
/// </summary>
public interface IGraphPluginManager
{
    /// <summary>
    /// Creates a graph using the specified plugin type and provided entities, relationships, and optional metadata.
    /// </summary>
    /// <param name="pluginType">
    /// The type of plugin to use for creating the graph. Supported types include ERD, Class Diagram, and Lineage.
    /// </param>
    /// <param name="entities">A collection of entities to include in the graph.</param>
    /// <param name="relationships">A collection of relationships between the entities.</param>
    /// <param name="nodeMetadata">
    /// Optional metadata to attach to nodes. The dictionary key represents the node identifier, and the value contains a dictionary of key-value metadata pairs.
    /// </param>
    /// <param name="edgeMetadata">
    /// Optional metadata to attach to edges. The dictionary key represents the edge identifier (e.g., "fromNode->toNode"), and the value contains a dictionary of key-value metadata pairs.
    /// </param>
    /// <returns>
    /// A <see cref="GraphData"/> object representing the graph generated by the specified plugin.
    /// </returns>
    /// <exception cref="ArgumentException">Thrown if an unsupported plugin type is provided.</exception>
    /// <exception cref="InvalidOperationException">Thrown if a required plugin for the specified type is not configured.</exception>
    GraphData CreateGraph(
        PluginType pluginType,
        IEnumerable<Entity> entities,
        IEnumerable<Relationship> relationships,
        Dictionary<string, Dictionary<string, object>>? nodeMetadata = null,
        Dictionary<string, Dictionary<string, object>>? edgeMetadata = null);
}